I am a router firmware testing who works for motorola. I have a repo that runs browser automation tests on the GUis of several models of routers. 



@pytest.fixture
def selenium_context():
    # Set up Selenium context
    selenium = Selenium()
    yield selenium
    # Tear down Selenium context
    selenium.close()

def test_something(selenium_context):
    # Use selenium_context to run your test
    pass

from selenium import webdriver

# List of available browser options
options = [
    "Chrome",
    "Firefox",
    "Edge",
    "Safari",
]

# Loop through all the available options
for option in options:
    # Set the desired capabilities for the current option
    capabilities = {
        "browserName": option,
    }

    # Create a new webdriver instance with the desired capabilities
    driver = webdriver.Chrome(desired_capabilities=capabilities)

    # Run your tests here

    # Close the webdriver instance
    driver.close()


    https://shareg.pt/gLJfefr

# PURE POWERHSELL 

# Dictionary of web browser drivers and their download URLs
$drivers = @{
    "Chrome" = "https://chromedriver.storage.googleapis.com/latest/chromedriver_win32.zip"
    "Firefox" = "https://github.com/mozilla/geckodriver/releases/download/v0.29.1/geckodriver-v0.29.1-win64.zip"
    "Edge" = "https://msedgedriver.azureedge.net/LATEST_RELEASE_EDGE"
}

# Check if each driver is installed
foreach ($driver in $drivers.Keys) {
    # Check if the driver executable exists
    if (-not (Test-Path -Path "$env:ProgramFiles\$driver\driver.exe")) {
        # Driver not found, download it
        Write-Output "$driver driver not found, downloading..."

        # Use Invoke-WebRequest to download the driver
        Invoke-WebRequest -Uri $drivers[$driver] -OutFile "$env:ProgramFiles\$driver\driver.zip"

        # Extract the downloaded zip file
        Add-Type -Assembly "System.IO.Compression.FileSystem"
        [IO.Compression.ZipFile]::ExtractToDirectory("$env:ProgramFiles\$driver\driver.zip", "$env:ProgramFiles\$driver")

        # Delete the zip file
        Remove-Item "$env:ProgramFiles\$driver\driver.zip"
    }
}

Write-Output "All web browser drivers are installed."

# PYTHON WITH LINUX

import os
import platform
import subprocess

# Dictionary of web browser drivers and their download URLs
drivers = {
    "Chrome": "https://chromedriver.storage.googleapis.com/latest/chromedriver_linux64.zip",
    "Firefox": "https://github.com/mozilla/geckodriver/releases/download/v0.29.1/geckodriver-v0.29.1-linux64.tar.gz",
    "Edge": "https://msedgedriver.azureedge.net/LATEST_RELEASE_EDGE",
    "Safari": "https://webkit.org/blog/6900/webdriver-support-in-safari-10/",
}

# Get the current OS
current_os = platform.system()

# Check if each driver is installed
for browser, url in drivers.items():
    # Skip Safari on non-macOS systems
    if browser == "Safari" and current_os != "Darwin":
        continue

    # Check if the driver executable exists
    if not os.path.exists(f"/usr/local/bin/{browser.lower()}driver"):
        # Driver not found, download it
        print(f"{browser} driver not found, downloading...")

        # Use wget to download the driver on Linux systems
        if current_os == "Linux":
            subprocess.run(["wget", "-O", f"/usr/local/bin/{browser.lower()}driver.zip", url])

            # Extract the downloaded zip file
            subprocess.run(["unzip", f"/usr/local/bin/{browser.lower()}driver.zip", "-d", "/usr/local/bin/"])

        # Use curl to download the driver on macOS systems
        elif current_os == "Darwin":
            subprocess.run(["curl", "-L", url, "-o", f"/usr/local/bin/{browser.lower()}driver.zip"])

            # Extract the downloaded zip file
            subprocess.run(["unzip", f"/usr/local/bin/{browser.lower()}driver.zip", "-d", "/usr/local/bin/"])

        # Set the executable bit on the driver executable
        subprocess.run(["chmod", "+x", f"/usr/local/bin/{browser.lower()}driver"])

print("All web browser drivers are installed.")


# PYTHON WITH WINDOWS

import os
import subprocess

# Dictionary of web browser drivers and their download URLs
drivers = {
    "Chrome": "https://chromedriver.storage.googleapis.com/latest/chromedriver_win32.zip",
    "Firefox": "https://github.com/mozilla/geckodriver/releases/download/v0.29.1/geckodriver-v0.29.1-win64.zip",
    "Edge": "https://msedgedriver.azureedge.net/LATEST_RELEASE_EDGE",
}

# Check if each driver is installed
for browser, url in drivers.items():
    # Check if the driver executable exists
    if not os.path.exists(f"C:\\Program Files\\{browser}\\driver.exe"):
        # Driver not found, download it
        print(f"{browser} driver not found, downloading...")

        # Use powershell to download the driver
        subprocess.run(["powershell", "-Command", f"Invoke-WebRequest -Uri {url} -OutFile 'C:\\Program Files\\{browser}\\driver.zip'"])

        # Extract the downloaded zip file
        subprocess.run(["powershell", "-Command", f"Add-Type -Assembly 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory('C:\\Program Files\\{browser}\\driver.zip', 'C:\\Program Files\\{browser}')"])

        # Delete the zip file
        subprocess.run(["powershell", "-Command", f"Remove-Item 'C:\\Program Files\\{browser}\\driver.zip'"])

print("All web browser drivers are installed.")


# NOT SURE ABOUT THIS ONE

import os
import subprocess

# Dictionary of web browser drivers and their download URLs
drivers = {
    "Chrome": {
        "url": "https://chromedriver.storage.googleapis.com/latest/chromedriver_win32.zip",
        "capabilities": {"acceptInsecureCerts": True},
    },
    "Firefox": {
        "url": "https://github.com/mozilla/geckodriver/releases/download/v0.29.1/geckodriver-v0.29.1-win64.zip",
        "capabilities": {"acceptInsecureCerts": True},
    },
    "Edge": {
        "url": "https://msedgedriver.azureedge.net/LATEST_RELEASE_EDGE",
        "capabilities": {"acceptInsecureCerts": True},
    },
}

# Check if each driver is installed
for browser, driver_info in drivers.items():
    url = driver_info["url"]
    capabilities = driver_info["capabilities"]

    # Check if the driver executable exists
    if not os.path.exists(f"C:\\Program Files\\{browser}\\driver.exe"):
        # Driver not found, download it
        print(f"{browser} driver not found, downloading...")

        # Use powershell to download the driver
        subprocess.run(["powershell", "-Command", f"Invoke-WebRequest -Uri {url} -OutFile 'C:\\Program Files\\{browser}\\driver.zip'"])

        # Extract the downloaded zip file
        subprocess.run(["powershell", "-Command", f"Add-Type -Assembly 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory('C:\\Program Files\\{browser}\\driver.zip', 'C:\\Program Files\\{browser}')"])

        # Delete the zip file
        subprocess.run(["powershell", "-Command", f"Remove-Item 'C:\\Program Files\\{browser}\\driver.zip'"])

print("All web browser drivers are installed.")

# Check all text for changes

import sqlite3

from selenium import webdriver


def store_elements(url, db_path):
    # Connect to the database
    conn = sqlite3.connect(db_path)
    c = conn.cursor()

    # Create the table if it doesn't exist
    c.execute(
        "CREATE TABLE IF NOT EXISTS elements (id INTEGER PRIMARY KEY, element_type TEXT, element_value TEXT)"
    )

    # Create a new webdriver instance
    driver = webdriver.Chrome()

    # Navigate to the page
    driver.get(url)

    # Find all elements on the page that contain a text field
    elements = driver.find_elements_by_css_selector("input[type='text']")

    # Loop through the elements and store them in the database
    for element in elements:
        element_type = element.get_attribute("type")
        element_value = element.get_attribute("value")

        c.execute(
            "INSERT INTO elements (element_type, element_value) VALUES (?, ?)",
            (element_type, element_value),
        )

    # Commit the changes to the database
    conn.commit()

    # Close the database connection
    conn.close()

    # Close the webdriver instance
    driver.close()





## GET CLICKABLE ELEMENTS

from selenium import webdriver


def get_clickable_elements(url):
    # Create a new webdriver instance
    driver = webdriver.Chrome()

    # Navigate to the page
    driver.get(url)

    # Find all clickable elements on the page
    elements = driver.find_elements_by_css_selector(
        "a, button, [role='button'], input[type='button'], input[type='submit']"
    )

    # Close the webdriver instance
    driver.close()

    # Return the elements
    return elements
